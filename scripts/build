#!/bin/bash

echo "Checking setup..."

wantGoVer="1.18.0"
go version >/dev/null 2>&1
if [ $? -ne 0 ]; then
   echo "Go missing.  Need Go version >= $wantGoVer. Install Go with:"
   echo ""
   echo "    sudo apt update"
   echo "    sudo apt install golang -y"
   echo ""
   exit 1
fi

goVer=`go version | { read _ _ v _; echo ${v#go}; }`
if [ "$(printf '%s\n' "$wantGoVer" "$goVer" | sort -V | head -n1)" = "$wantGoVer" ]; then
   echo "Go version $goVer"
else
   echo "Need Go version >= $wantGoVer.  Installed version is $goVer."
   echo ""
   echo "Install latest Go from https://go.dev/doc/install"
   echo ""
   exit 1
fi

gcc --version >/dev/null 2>&1
if [ $? -ne 0 ]; then
   echo "gcc missing.  Install gcc with:"
   echo ""
   echo "    sudo apt update"
   echo "    sudo apt install gcc -y"
   echo ""
   exit 1
fi

dpkg -s libpam0g-dev >/dev/null 2>&1
if [ $? -ne 0 ]; then
   sudo apt update
   sudo apt-get -y install libpam0g-dev
fi

tags=""
if [ ! -z "$1" ]; then
    tags="$1"
fi

tmpFile="/tmp/$USER-merle-build"
go list -tags "$tags" -f '{{.Dir}} {{.Target}}' ./... >$tmpFile

buildGood=1

while read -r line; do
	args=($line)
	if [ ! -z ${args[1]} ]; then
		echo "Building ${args[1]}..."
		cd ${args[0]}
		go build -tags "$tags" ./...
		if [ $? -ne 0 ]; then
			buildGood=0
			break
		fi
		go clean -tags "$tags" ./...
		go install  -tags "$tags" ./...
		sudo setcap CAP_NET_BIND_SERVICE=+eip ${args[1]}
	fi
done <$tmpFile

rm $tmpFile

if [ $buildGood -eq 0 ]; then
	exit 1
fi
